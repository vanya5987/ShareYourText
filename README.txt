Этот проект является простым аналогом приложения Pastebin. Приложение было сделано исключительно для демонстрации моих навыков в C#,но в дальнейшем работа над ним может быть продолжена.


-В приложении реализован следующий функционал:


•Реализована простая авторизация при помощи Google APIs.
•Приложение запрашивает у пользователя имя и текст файла который необходимо сохранить.
•Файл сохраняется в облачное хранилище и возвращает пользователю публичную ссылку на файл.
•Реализована простая система оценки постов и топ наиболее популярных ссылок.
•Реализована простая система для хэширования ссылок алгоритмом SHA256 для удобного хранения и обеспечения наибольшей безопасности.
•Реализована простая система хранения ссылок для удобного доступа к ним при помощи реляционной БД SQLite.
•Реализован поиск нужной пользователю ссылки среди Hash-сумм для обеспечения наибольшей защиты данных,пользователю возвращается ссылка не измененная алгоритмом SHA256.
•Реализован вывод текста хранящегося по ссылке в отдельное окно интерфейса.
•Реализованна возможность копирования ссылки из топа в один клик для ее просмотра и оценки.
•Реализован простой графический интерфейс при помощи Microsoft Forms.


-Данная программа была написана с упором на соблюдение SOLID и ООП.



### Отчет о применении архитектурного паттерна MVVM с конкретными примерами реализации

#### Введение

Архитектурный паттерн MVVM (Model-View-ViewModel) используется в разработке приложений для упрощения взаимодействия между интерфейсом пользователя и бизнес-логикой. В данном отчете мы проанализируем структурные единицы приложения, описанного в предоставленном коде, с акцентом на реализацию подхода MVVM.

### 1. Модель (Model)

В данное приложение модель включает классы, которые обрабатывают и хранят данные. Примеры таких классов:

- **BaseLinkEntity и HashLinkEntity**: Эти классы представляют сущности, которые хранят данные о ссылках. Они наследуются от базового класса **LinkDbForm**, который определяет общие свойства, такие как `ExpirationDate`. Эти классы отвечают за инкапсуляцию данных, связанных с ссылками, и могут использоваться для управления ими в базе данных.

- **LinkBaseDbContext и LinkHashDbContext**: Это контексты Entity Framework, управляющие доступом к базе данных. Они позволяют создать и взаимодействовать с таблицами, в которых хранятся данные ссылок, используя ORM под названием Entity Framework Core.

#### 2. Представление (View)

Представление в данном приложении реализуется в классе **ShareText**, который наследуется от **Form**. Оно включает элементы пользовательского интерфейса, такие как текстовые поля и кнопки. Основные функции представления:

- **Отображение данных**: Метод **ShowTopClicked** отображает популярные ссылки в списке, вызывая метод интерфейса **IShowUI**. Этот интерфейс обеспечивает четкое разделение между логикой представления и отображением данных.

- **Обработка событий**: Класс **ShareText** управляет событиями, такими как нажатия кнопок, и вызывает соответствующие методы для выполнения логики приложения. Например, событие **LikeClicked** вызывает метод **LikePost** из класса **PostController**, что показывает связь между представлением и логикой.

#### 3. Модель представления (ViewModel)

В паттерне MVVM модель представления управляет состоянием представления и координирует взаимодействие между моделью и представлением. В данном коде функции модели представления распределены по нескольким классам:

- **LinkCreator и LinkGenerator**: Эти классы отвечают за создание и генерацию ссылок. Класс **LinkGenerator** генерирует *SHA256* хэш для предоставленной ссылки, а класс **LinkCreator** использует объект *LinkGenerator* для создания базовой ссылки и ее хэша. Это разделение обязанностей упрощает тестирование и улучшает поддерживаемость кода.

- **LinkRepositoryManager**: Этот класс управляет коллекцией ссылок и делегирует задачи по добавлению и удалению ссылок классам, реализующим интерфейсы `IDatabaseLinkAdder` и `IDatabaseLinkRemover`. Это позволяет легко изменять логику управления ссылками при необходимости.

- **PostController**: Отвечает за управление действиями пользователей, такими как лайки и дизлайки. Он использует интерфейсы для получения пользовательского ввода и выполнения операций над сущностями ссылок.

### Примеры реализации

#### 1. Уровень модели

- **BaseLinkEntity**: Хранит данные о базовом формате ссылки и количестве лайков. Это позволяет удобно работать с данными в контексте базы.
  
- **LinkBaseDbContext**: Реализует методы для конфигурации базы данных, что способствует легкости взаимодействия с данными.

#### 2. Уровень представления

- **ShareText**: основной класс для интерфейса пользователя, который обрабатывает ввод данных и взаимодействие с пользователем (нажатия кнопок, отображение данных).

#### 3. Уровень модели представления

- **LinkRepositoryManager**: координирует взаимодействие между добавлением и удалением ссылок. В методе **AddLink** вызываются действия по добавлению как базовой, так и хэшированной ссылки.

- **FileTextShowing**: управляет логикой отображения текста файла, обеспечивая взаимодействие между пользовательским вводом и отображением данных. Он использует интерфейсы для доступа к необходимым данным и методам.

### Заключение

Архитектурный паттерн MVVM в данном приложении позволяет четко разделить ответственность между компонентами, улучшая организацию и поддержку кода. Четкое разделение на модель, представление и модель представления обеспечивает высокий уровень абстракции и простоту в модификации. Этот подход позволяет также эффективно тестировать бизнес-логику, не вмешиваясь в детали интерфейса. Классы, реализующие интерфейсы, предоставляют гибкость и расширяемость, что делает код более читаемым и легко управляемым.
